#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "hold-preferred";
    quick-tap-ms = <200>;
};

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <200>;

};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                   &kp T                                                   &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                   &kp G      &none                       &none            &kp H        &kp J  &kp K      &kp L    &lt 5 MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B      &none                       &none            &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 3 LANG2  &kp SPACE  &lt_to_layer_0 5 LANG1      &lt 2 BACKSPACE  &lt 1 ENTER                             &mt RIGHT_CONTROL ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        ARROW_NUM {
            bindings = <
&kp TAB            &kp N7  &kp N8  &kp N9    &mt ASTERISK EQUAL                            &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp F10         &kp RIGHT_ALT    &kp TAB
&trans             &kp N4  &kp N5  &kp N6    &mt PLUS MINUS      &trans        &trans      &kp PAGE_UP           &kp HOME               &kp UP_ARROW    &kp END          &kp COLON
&mt LEFT_SHIFT N0  &kp N1  &kp N2  &kp N3    &mt COMMA DOT       &trans        &trans      &kp PAGE_DOWN         &kp LEFT_ARROW         &kp DOWN_ARROW  &kp RIGHT_ARROW  &mt RIGHT_SHIFT SLASH
&trans             &trans  &trans  &kp LALT  &trans              &kp LGUI      &kp DELETE  &trans                                                                        &trans
            >;
        };

        ARROW_SIGN {
            bindings = <
&kp LS(EXCL)         &kp LS(AT)       &kp LS(POUND)       &kp LS(DLLR)                 &kp LS(PRCNT)                                      &kp LC(W)      &kp LC(R)     &kp LC(T)     &kp LC(LS(T))  &mt PLUS EQUAL
&kp LS(CARET)        &kp LS(AMPS)     &kp LS(STAR)        &kp LS(LPAR)                 &kp LS(RPAR)                   &trans      &trans  &kp LC(PG_UP)  &kp LC(HOME)  &kp LA(UP)    &kp LC(END)    &mt UNDER MINUS
&mt COLON SEMICOLON  &mt TILDE GRAVE  &mt PIPE BACKSLASH  &mt LEFT_BRACE LEFT_BRACKET  &mt RIGHT_BRACE RIGHT_BRACKET  &trans      &trans  &kp LC(PG_DN)  &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(RIGHT)  &mt DOUBLE_QUOTES APOS
&trans               &trans           &trans              &trans                       &trans                         &mo 6       &trans  &trans                                                    &kp LG(L)
            >;
        };

        FUNCTION {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5                       &kp N6     &kp N7    &kp N8    &kp N9     &kp N0
&trans  &kp F2  &kp F3  &kp F4  &kp F5   &trans      &trans  &kp PG_UP  &kp HOME  &kp UP    &kp END    &trans
&trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans      &trans  &kp PG_DN  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans   &trans      &trans  &trans                                    &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans    &trans    &trans                        &trans  &trans    &trans    &trans    &trans
&trans  &trans  &mkp MB2  &mkp MB1  &mo 5     &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &mo 5
&trans  &trans  &trans    &trans    &mkp MB3  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans    &trans    &trans    &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &kp LA(F4)  &kp LA(LC(F5))                               &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans      &trans            &trans      &trans         &trans  &trans  &trans  &trans  &kp LG(LC(RIGHT))
&trans  &trans  &trans  &trans      &kp LS(LG(LEFT))  &trans      &trans         &trans  &trans  &trans  &trans  &kp LG(LC(LEFT))
&trans  &trans  &trans  &trans      &trans            &trans      &kp BACKSPACE  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
